@inherits LayoutComponentBase


@if (va.IsLoading)
{
    <div class="la-line-scale-party loader">
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
    </div>
}

<AuthorizeView>
    <Authorized>
        <div class="sidebar @NavMenuCssClass">
            <NavMenu />
        </div>

        <div id="app-header" @onclick="ToggleNavMenu">
            <div id="menubar" class="bar">
                <span class="pointer">
                    <span class="fa fa-bars fa-2x" id="bars"></span>
                </span>
            </div>
        </div>

        <div class="main" style="overflow-x: hidden">
            @*<div class="top-row">
                <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
            </div>*@

            <Toast SuccessIconClass="fa fa-check-circle" WarningIconClass="fa fa-exclamation-circle" />
            <div class="content">
                @Body
            </div>
        </div>
    </Authorized>
</AuthorizeView>
    

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    int InnerHeight = 0;
    int InnerWidth = 0;
    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ?  null : "sidebarcollapse";

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        BrowserResize.OnResize += BrowserHasResized;
        va.LoadingEvent += LoadingEventChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("login");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            (InnerWidth, InnerHeight) = await Resize.GetResize();
            va.IsMobile = InnerWidth < 768;
            va.IsTablet = InnerWidth < 992;
            await JSRuntime.InvokeAsync<object>("CustomJsFunctions.registerResizeCallback");
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        BrowserResize.OnResize -= BrowserHasResized;
        va.LoadingEvent -= LoadingEventChanged;
    }

    #region Function

    private async Task BrowserHasResized()
    {
        (InnerWidth, InnerHeight) = await Resize.GetResize();
        va.IsMobile = InnerWidth < 768;
        va.IsTablet = InnerWidth < 992;
        //ToggleWindowWidth();
        StateHasChanged();
    }

    private void LoadingEventChanged()
    {
        InvokeAsync(() => StateHasChanged());
    }

    #endregion
}
