@page "/changepassword"

<div class="modal confirm-modal" id="@elementID" style="@Zindex;">
    <div class="modal-dialog">
        @if (ChangePwd)
        {
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <div class="row my-row">
                        <div class="header-lit-enf pad-top-7">
                            <h6 class="h-style">Change Password</h6>
                        </div>
                        <div class="ml-auto">
                            <button type="button" class="btn cancel-btn" @onclick="@OnChangedData">
                                <i class="fa fa-check"></i>
                            </button>
                            <button type="button" class="btn cancel-btn" @onclick="@CloseModal">
                                <i class="fa fa-ban"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <div class="form-group row">
                        <div class="col-4">
                            <span class="text-color" @onclick="@(() => JsService.Focus("login-pwd"))">New Password*</span>
                        </div>
                        <div class="col-8">
                            <input type="password" id="login-pwd"
                                   errorborder="@(dict["adminlogP"] != null ? "err" : "" )" @onchange="PwdOnChanged" @onkeyup="OnEnter"
                                   class="full form-control pad-right-25"
                                   autocomplete="new-password" />
                            <span id="eye-icon" class="fa fa-eye eye-icon" @onclick="@(()=>JSRuntime.InvokeVoidAsync("CustomJsFunctions.ShowPassword", "login-pwd","eye-icon"))"></span>
                            @if (!string.IsNullOrWhiteSpace(dict["adminlogP"]))
                            {
                                <label for="" class="text-danger">@dict["adminlogP"]</label>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public bool ChangePwd { get; set; }

    [Parameter]
    public object ObjName { get; set; }

    [Parameter]
    public int Zindex { get; set; } = 6001;

    [Parameter]
    public Action<bool> OnEmit { get; set; }

    [Parameter]
    public string ModelName { get; set; }

    private en.user_account userAccount { get; set; } = new en.user_account();
    private Dictionary<string, string> dict;
    private string elementID = Guid.NewGuid() + "changePwd", adminlogP;
    private bool show_eye = false, istoast = true;

    protected override void OnInitialized()
    {
        RegisterDictionary();
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsService.OpenModal(elementID);
        }
    }
    #region Function

    private void RegisterDictionary()
    {
        dict = new Dictionary<string, string>()
    {
            {"adminlogP", null },
            {"errMsg", null }
        };
    }

    private async Task OnChangedData()
    {
        //try
        //{
        //    if (!string.IsNullOrWhiteSpace(fn.ValidatePassword(adminlogP)))
        //    {
        //        dict["adminlogP"] = fn.ValidatePassword(adminlogP);
        //        return;
        //    }

        //    if (ModelName == "admin")
        //    {
        //        userAccount = (en.user_account)ObjName;
        //        adminlogP = UserManager.PasswordHasher.HashPassword(
        //                           new e.Admin { AmId = admin.AmId, LogN = admin.LogN },
        //                           adminlogP);
        //        var result = await d.Admin.ChangePassword((Guid)admin.AmId, adminlogP);

        //        if (result.Status != e.Status.Success)
        //        {
        //            dict["errMsg"] = result.Msg;
        //            return;
        //        }
        //    }
        //    OnEmit.Invoke(false);
        //    await JsService.Toast("toastsave", "Save Success");
        //    await JsService.CloseModal(elementID);
        //    var authState = await authenticationStateTask;
        //    if (admin.LogN == authState.User.Identity.Name)
        //    {
        //        NavigationManager.NavigateTo("logout", true);
        //    }

        //}
        //catch (Exception ex)
        //{
        //    dict["errMsg"] = ex.Message;
        //}
    }

    private void ClosedErrorModel()
    {
        dict["errMsg"] = null;
        StateHasChanged();
    }

    private async void CloseModal()
    {
        RegisterDictionary();
        OnEmit.Invoke(false);
        await JsService.CloseModal(elementID);
    }

    private void showPassword()
    {
        show_eye = !show_eye;
    }

    #endregion Function

    #region Event
    private void PwdOnChanged(ChangeEventArgs e)
    {
        adminlogP = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(fn.ValidatePassword(adminlogP)))
        {
            dict["adminlogP"] = fn.ValidatePassword(adminlogP);
        }
        else
            dict["adminlogP"] = null;
    }

    private async Task OnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnChangedData();
        }
    }
    #endregion Event

    #region Validation

    #endregion Validation
}

