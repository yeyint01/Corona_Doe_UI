@page "/changepassword"
@inject UserManager<Entity.user_account> UserManager

<Modal Title="@title" @ref="modal" OnModalClose="HandleModalClose">
    <ModalBody>
        <div class="form-group row">
            <div class="col-4">
                <span @onclick="@(() => JsService.Focus("login-pwd"))">New Password*</span>
            </div>
            <div class="col-8">
                <input type="password" id="login-pwd"
                       errorborder="@(customWarning != null ? "err" : "" )" @onchange="PwdOnChanged" @onkeyup="OnEnter"
                       class="full form-control pad-right-25"
                       autocomplete="new-password" />
                <span id="eye-icon" class="fa fa-eye eye-icon" @onclick="@(()=>JSRuntime.InvokeVoidAsync("CustomJsFunctions.ShowPassword", "login-pwd","eye-icon"))"></span>
                @if (!string.IsNullOrWhiteSpace(customWarning))
                {
                    <label for="" class="text-danger">@customWarning</label>
                }
            </div>
        </div>
    </ModalBody>
    <ModalFooter>
        <button class="btn btn-info" @onclick="HandlPostiveClick"><span>@btn1</span></button>

        @if (btn2 != null)
        {
            <button class="btn btn-dark" @onclick="HandlNegativeClick"><span>@btn2</span></button>
        }
    </ModalFooter>
</Modal>

<MessageModal @ref="errModal" />

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public object ObjName { get; set; }

    [Parameter]
    public string ModelName { get; set; }

    [Parameter]
    public Action<bool> OnEmit { get; set; }

    private Modal modal;
    private MessageModal errModal;
    private TaskCompletionSource<bool> tcs;
    private Dictionary<string, string> dict;
    private string customWarning, title, btn1, btn2, adminlogP;
    private bool show_eye = false, istoast = true;
    private en.user_account userAccount { get; set; }

    protected override void OnInitialized()
    {
        userAccount = new en.user_account();
    }

    #region Function

    public void Show(string title, string message)
    {
        this.title = title;
        btn1 = "Ok";
        btn2 = "Cancel";
        modal.Open();

        // to affect changes on this.title and this.message
        StateHasChanged();
    }

    public Task<bool> Show(string title, string message, string postive, string negative)
    {
        tcs = new TaskCompletionSource<bool>();

        this.title = title;
        btn1 = postive;
        btn2 = negative;
        modal.Open();

        // to affect changes on this.title and this.message
        StateHasChanged();

        return tcs.Task;
    }

    private async Task HandlPostiveClick()
    {
        if (!string.IsNullOrWhiteSpace(fn.ValidatePassword(adminlogP)))
        {
            customWarning = fn.ValidatePassword(adminlogP);
            return;
        }
        await modal.Close();

        // password have be change.
        await OnChangedPassword();

        tcs?.TrySetResult(true);
    }

    private async Task HandlNegativeClick()
    {
        customWarning = null;
        await modal.Close();

        tcs?.TrySetResult(false);
    }

    private Task HandleModalClose(bool forceClose)
    {
        customWarning = null;
        if (forceClose)
            tcs?.TrySetResult(false);

        return Task.FromResult(0);
    }

    private async Task OnChangedPassword()
    {
        try
        {
            if (ModelName == "user_account")
            {
                userAccount = (en.user_account)ObjName;
                adminlogP = UserManager.PasswordHasher.HashPassword(
                                   new en.user_account { user_id = userAccount.user_id, user_name = userAccount.user_name },
                                   adminlogP);
                var result = await da.user_account.ChangePassword(userAccount.user_id, adminlogP);

                if (result.Status != en.shared.Status.Success)
                {
                    errModal.Show("Message", result.Msg);
                    return;
                }
            }

            await JsService.Toast("toastsave", "Save Success");
            var authState = await authenticationStateTask;
            if (userAccount.user_name == authState.User.Identity.Name)
            {
                NavigationManager.NavigateTo("logout", true);
            }

        }
        catch (Exception ex)
        {
            errModal.Show("Message", ex.Message);
        }
    }

    private void showPassword()
    {
        show_eye = !show_eye;
    }

    #endregion Function

    #region Event

    private void PwdOnChanged(ChangeEventArgs e)
    {
        adminlogP = (string)e.Value;
        if (!string.IsNullOrWhiteSpace(fn.ValidatePassword(adminlogP)))
        {
            customWarning = fn.ValidatePassword(adminlogP);
        }
        else
            customWarning = null;
    }

    private async Task OnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnChangedPassword();
        }
    }

    #endregion Event
}

