@page "/confirmpassword"

<div class="modal confirm-modal" id="@elementID" style="@Zindex;">
    <div class="modal-dialog">
        @if (ComfimPwd)
        {
            <div class="modal-content">

                <div class="modal-header">
                    <div class="row my-row">
                        <div class="header-lit-enf pad-top-7">
                            <h6 class="h-style">Comfirmation Password</h6>
                        </div>
                        <div class="ml-auto">
                            <button type="button" class="btn cancel-btn" @onclick="@OnConfirmedData">
                                <i class="fa fa-check"></i>
                            </button>
                            <button type="button" class="btn cancel-btn" @onclick="@CloseModal">
                                <i class="fa fa-ban"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <div class="form-group row">
                        <div class="col-4">
                            <span class="text-color" @onclick="@(() => JsService.Focus("login-pwd"))">Current Password*</span>
                        </div>
                        <div class="col-8">
                            <input type="password" id="login-pwd"
                                   errorborder="@(customWarning  != null ? "err" : "" )" @onchange="ComfirmPwdOnChanged" @onkeyup="OnEnter"
                                   class="full form-control pad-right-25"
                                   autocomplete="new-password" />
                            <span id="eye-icon" class="fa fa-eye eye-icon" @onclick="@(()=>JSRuntime.InvokeVoidAsync("CustomJsFunctions.ShowPassword", "login-pwd","eye-icon"))"></span>
                            @if (!string.IsNullOrWhiteSpace(customWarning))
                            {
                                <label for="" class="text-danger">@customWarning</label>
                            }
                        </div>
                    </div>
                </div>

            </div>
        }
    </div>
</div>
@code {

    [Parameter]
    public bool ComfimPwd { get; set; }

    [Parameter]
    public int Zindex { get; set; } = 6001;

    [Parameter]
    public Action<bool, bool> OnEmit { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private en.user_account currentUserAccount;
    private string customWarning;

    public string elementID = Guid.NewGuid() + "confirmPwd", logP;
    private bool show_eye = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsService.OpenModal(elementID);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;
        if (authState == null) return;
        currentUserAccount = await da.user_account.Get(authState.User.Identity.Name);
    }

    #region Function

    private async void OnConfirmedData()
    {
        if (ValidatePwd())
        {
            OnEmit.Invoke(false, true);
            await JsService.CloseModal(elementID);
        }
    }

    private bool IsPasswordMatch(string password)
    {
        //return da.user_account.CheckPasswordAsync(currentUserAccount, password).Result;
        return false;
    }

    private void showPassword()
    {
        show_eye = !show_eye;
    }

    private async void CloseModal()
    {
        OnEmit.Invoke(false, false);
        await JsService.CloseModal(elementID);
    }

    #endregion Function

    #region Event
    private void ComfirmPwdOnChanged(ChangeEventArgs e)
    {
        logP = e.Value.ToString();
        ValidatePwd();
    }

    private void OnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnConfirmedData();
        }
    }
    #endregion Event

    #region Validation

    private bool ValidatePwd()
    {
        if (string.IsNullOrWhiteSpace(logP))
        {
            customWarning = "Please fill password.";
            return false;
        }
        else if (logP.Length > 100)
        {
            customWarning = "Please fill password within 100 characters.";
            return false;
        }
        if (!IsPasswordMatch(logP))
        {
            customWarning = "Please fill correct password.";
            return false;
        }
        else
        {
            customWarning = null;
            return true;
        }
    }

    #endregion Validation
}
