@page "/confirmpassword"
@inject UserManager<Entity.user_account> UserManager

<Modal Title="@title" @ref="modal" OnModalClose="HandleModalClose">
    <ModalBody>
        <div class="form-group row">
            <div class="col-4">
                <span @onclick="@(() => JsService.Focus("login-pwd"))">Current Password*</span>
            </div>
            <div class="col-8">
                <input type="password" id="login-pwd"
                       errorborder="@(customWarning  != null ? "err" : "" )" @onchange="ComfirmPwdOnChanged" @onkeyup="OnEnter"
                       class="full form-control pad-right-25"
                       autocomplete="new-password" />
                <span id="eye-icon" class="fa fa-eye eye-icon" @onclick="@(()=>JSRuntime.InvokeVoidAsync("CustomJsFunctions.ShowPassword", "login-pwd","eye-icon"))"></span>
                @if (!string.IsNullOrWhiteSpace(customWarning))
                {
                    <label for="" class="text-danger">@customWarning</label>
                }
            </div>
        </div>
    </ModalBody>
    <ModalFooter>
        <button class="btn btn-info" @onclick="HandlPostiveClick"><span>@btn1</span></button>

        @if (btn2 != null)
        {
            <button class="btn btn-dark" @onclick="HandlNegativeClick"><span>@btn2</span></button>
        }
    </ModalFooter>
</Modal>
@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public Action<bool> OnEmit { get; set; }

    private Modal modal;
    private TaskCompletionSource<bool> tcs;
    private en.user_account currentUserAccount;

    private bool show_eye = false;
    private string customWarning, title, btn1, btn2, logP;

    #region Function

    public async Task Show(string title, string message)
    {
        // move from OnParametersSetAsync
        var authState = await authenticationStateTask;
        if (authState == null) return;
        currentUserAccount = await da.user_account.Get(authState.User.Identity.Name);

        this.title = title;
        btn1 = "Ok";
        btn2 = "Cancel";
        await modal.Open();

        // to affect changes on this.title and this.message
        StateHasChanged();
    }

    public Task<bool> Show(string title, string message, string postive, string negative)
    {
        tcs = new TaskCompletionSource<bool>();

        this.title = title;
        btn1 = postive;
        btn2 = negative;
        modal.Open();

        // to affect changes on this.title and this.message
        StateHasChanged();

        return tcs.Task;
    }

    private async Task HandlPostiveClick()
    {
        if (ValidatePwd())
        {
            await modal.Close();

            OnEmit.Invoke(true);

            tcs?.TrySetResult(true);
        }
    }

    private async Task HandlNegativeClick()
    {
        customWarning = null;
        await modal.Close();
        OnEmit.Invoke(false);

        tcs?.TrySetResult(false);
    }

    private Task HandleModalClose(bool forceClose)
    {
        customWarning = null;
        if (forceClose)
            tcs?.TrySetResult(false);

        return Task.FromResult(0);
    }

    private bool IsPasswordMatch(string password)
    {
        return UserManager.CheckPasswordAsync(currentUserAccount, password).Result;
    }

    private void showPassword()
    {
        show_eye = !show_eye;
    }

    #endregion Function

    #region Event

    private void ComfirmPwdOnChanged(ChangeEventArgs e)
    {
        logP = e.Value.ToString();
        ValidatePwd();
    }

    private async Task OnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandlPostiveClick();
        }
    }
    #endregion Event

    #region Validation

    private bool ValidatePwd()
    {
        if (string.IsNullOrWhiteSpace(logP))
        {
            customWarning = "Please fill password.";
            return false;
        }
        else if (logP.Length > 100)
        {
            customWarning = "Please fill password within 100 characters.";
            return false;
        }
        if (!IsPasswordMatch(logP))
        {
            customWarning = "Please fill correct password.";
            return false;
        }
        else
        {
            customWarning = null;
            return true;
        }
    }

    #endregion Validation
}
