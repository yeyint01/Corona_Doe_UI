@page "/useraccount/list"
@implements IDisposable

<h4 class="header">User Account</h4>

@if (userAccountResult != null)
{
    <div class="mb-3 mt-3 d-flex">
        <button class="btn btn-info mr-3"
                @onclick="@(() => NavigationManager.NavigateTo("useraccount/entry/0"))">
            <span>+ Add new</span>
        </button>

        <SearchBox SearchClick="HandlSearchClick" />
    </div>

    <CustomGrid Entity="en.user_account" PagerSize="@(va.IsMobile ? 3 : 5)" PagesCount="userAccountResult.PgCount" IsPagingNone="@isCustomPagingNone" TableLayout="table-layout"
                ItemList="@userAccountResult.User_Accounts" GridRowClick="HandleRowClick" PagerClick="PagerClick" RowsCount="userAccountResult.RCount" TablePaging="@(va.IsMobile? "true": "false")">
        <GridHeader>
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Name*" OnHeaderClick="OnHeaderClick" OrderBy="user_name" />
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Full Name*" OnHeaderClick="OnHeaderClick" OrderBy="user_name" />
            @if (!va.IsMobile)
            {
                <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Phone*" OnHeaderClick="OnHeaderClick" OrderBy="phone_no" />
                <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Remark" OnHeaderClick="OnHeaderClick" OrderBy="remark" />
            }

        </GridHeader>
        <GridRow>
            <td>
                <span>@context.user_name</span>
            </td>
            <td>
                <span>@context.full_name</span>
            </td>
            @if (!va.IsMobile)
            {
                <td>
                    <span>@context.phone_no</span>
                </td>
                <td>
                    <span>@context.remark</span>
                </td>
            }

        </GridRow>
    </CustomGrid>
}

<MessageModal @ref="modal" />

@code {

    private en.user_accountResult userAccountResult;

    private string searchText;
    private MessageModal modal;
    private bool isCustomPagingNone;
    private int currentPage, gridHeight;
    private string elementID = Guid.NewGuid() + "loginuserlist";
    private (string OrderBy, en.shared.SortOrder Order) CurSortInfo;

    protected override void OnInitialized()
    {
        va.IsLoading = true;
        currentPage = 1;
        userAccountResult = new en.user_accountResult();
        BrowserResize.OnResize += BrowserHasResized;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        BrowserResize.OnResize -= BrowserHasResized;
    }

    #region Functions

    private async Task GetData()    // get data from server
    {
        try
        {
            userAccountResult = await da.user_account.Get(new en.user_accountParam
            {
                Name = searchText,
                PgNo = currentPage,
                Order = CurSortInfo.Order,
                OrderBy = CurSortInfo.OrderBy
            });
            va.IsLoading = false;
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandlSearchClick(string text)
    {
        searchText = text;
        currentPage = 1;
        await GetData();
    }

    private async Task OnHeaderClick(string orderBy)
    {
        CurSortInfo = fn.CurrentSortInfo(orderBy);
        isCustomPagingNone = true;
        await GetData();
        isCustomPagingNone = false;
    }

    private Task HandleRowClick(en.user_account obj)
    {
        NavigationManager.NavigateTo("useraccount/entry/" + obj.user_id);

        return Task.FromResult<object>(null);
    }

    private async Task PagerClick(int curpage)      // paging clicked event
    {
        currentPage = curpage;
        await GetData();
    }

    private async Task BrowserHasResized()
    {
        gridHeight = await JSRuntime.InvokeAsync<int>("CustomJsFunctions.setGridHeight", elementID);
        StateHasChanged();
    }

    #endregion
}
