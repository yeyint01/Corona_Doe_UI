@page "/entrypoint/list"
@implements IDisposable

<h4 class="header">Entry Point</h4>

@if (pointsResult == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="mb-3 mt-3 d-flex">
    <button class="btn btn-info mr-3"
            @onclick="@(() => NavigationManager.NavigateTo("entrypoint/0"))">
        <span>+ Add new</span>
    </button>
    <SearchBox SearchClick="HandlSearchClick" />
</div>

    <CustomGrid Entity="en.entry_points" PagerSize="@(va.IsMobile ? 3 : 5)" PagesCount="pointsResult.PgCount" IsPagingNone="@isCustomPagingNone" TableLayout="table-layout"
                ItemList="@pointsResult.Entry_Points" GridRowClick="ShowModel" PagerClick="PagerClick" RowsCount="pointsResult.RCount" TablePaging="@(va.IsMobile? "true": "false")">
        <GridHeader>
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Myanmar Name*" OnHeaderClick="OnHeaderClick" OrderBy="name_mm" />
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="English Name*" OnHeaderClick="OnHeaderClick" OrderBy="name_en" />
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Remark*" OnHeaderClick="OnHeaderClick" OrderBy="remark" />
        </GridHeader>
        <GridRow>
            <td class="w-75-pixel">
                <span>@context.name_mm</span>
            </td>
            <td>
                <span>@context.name_en</span>
            </td>
            <td>
                <span>@context.remark</span>
            </td>
        </GridRow>
    </CustomGrid>

}

@code {
    private en.entry_pointsResult pointsResult;
    private int currentPage;
    private string searchText;
    private int gridHeight;
    private string elementID = Guid.NewGuid() + "entrypointlist";
    private MessageModal modal;
    private (string OrderBy, es.SortOrder Order) CurSortInfo;

    private bool isCustomPagingNone;

    protected override void OnInitialized()
    {   va.IsLoading = true;
        currentPage = 1;
        pointsResult = new en.entry_pointsResult();
        BrowserResize.OnResize += BrowserHasResized;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            va.IsLoading = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        BrowserResize.OnResize -= BrowserHasResized;
    }

    #region Functions

    private async Task GetData()
    {
        try
        {
            pointsResult = await da.entry_points.Get(new en.entry_pointsParam
            {
                Name = searchText,
                PgNo = currentPage,
                Order = CurSortInfo.Order,
                OrderBy = CurSortInfo.OrderBy
            });
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }

    }
    private async Task HandlSearchClick(string text)
    {
        searchText = text;
        currentPage = 1;
        await GetData();
    }


    private Task HandleRowClick(int point_id)
    {
        NavigationManager.NavigateTo("entrypoint/" + point_id);

        return Task.FromResult<object>(null);
    }

    private Task ShowModel(en.entry_points obj)     // open entry modal
    {
        NavigationManager.NavigateTo("entrypoint/" + obj.entrypoint_id);

        return Task.FromResult<object>(null);
    }

    private async Task PagerClick(int curpage)      // paging clicked event
    {
        currentPage = curpage;
        await GetData();
    }
    private async Task OnHeaderClick(string orderBy)
    {
        CurSortInfo = fn.CurrentSortInfo(orderBy);
        isCustomPagingNone = true;
        await GetData();
        isCustomPagingNone = false;
    }

    private async Task BrowserHasResized()
    {
        gridHeight = await JSRuntime.InvokeAsync<int>("CustomJsFunctions.setGridHeight", elementID);        
        StateHasChanged();
    }

    #endregion Functions

}
