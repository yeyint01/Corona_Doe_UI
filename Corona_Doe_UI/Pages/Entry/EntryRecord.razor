@page "/entryrecord/{EntryRecordId:int}"

@inject NavigationManager navMgr

<h4 class="header">Entry Record Form</h4>

@if (entryRecord != null)
{
    <EditForm Model="@entryRecord" OnValidSubmit="HandleValidSubmit" autocomplete="off">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-sm-6 coll-12">
                <div class="form-group">
                    <label for="name">Name*</label>
                    <InputText class="form-control" id="entry-name" @bind-Value="entryRecord.person_name" />
                </div>
                <div class="form-group">
                    <label for="phone">Phone*</label>
                    <InputText class="form-control" id="phone" @bind-Value="entryRecord.person_ph" />
                </div>
                <div class="form-group">
                    <label for="nrc">NRC</label>
                    <InputText class="form-control" id="nrc" @bind-Value="entryRecord.person_nrc" />
                </div>
                <div class="form-group">
                    <label for="age">Age</label>
                    <InputText class="form-control" id="age" @bind-Value="entryRecord.person_age" />
                </div>
                <div class="form-group" style="padding-bottom: 4px !important;padding-top: 9px;">
                    <label>Gender</label>
                    <div>
                        <input type="radio" name="radio-group" id="radio1" @onclick="@(()=>IsCheck(en.Gender.Male))" checked="@isMaleCheck" />
                        <label for="radio1" class="text-color">Male</label>
                        <input type="radio" name="radio-group" id="radio2" @onclick="@(()=>IsCheck(en.Gender.Female))" checked="@isFemaleCheck" />
                        <label for="radio2" class="text-color">Female</label>
                    </div>
                </div>

                <div class="form-group">
                    <label for="curraddress">Current Address</label>
                    <InputText class="form-control" id="curraddress" @bind-Value="entryRecord.current_address" />
                </div>
                <div class="form-group">
                    <label for="residenceaddr">Residence Address</label>
                    <InputText class="form-control" id="residenceaddr" @bind-Value="entryRecord.residence_address" />
                </div>
            </div>
            <div class="col-sm-6 col-12">
                <div class="form-group">
                    <label for="hometown">HomeTown</label>
                    <InputText class="form-control" id="hometown" @bind-Value="entryRecord.hometown" />
                </div>
                <div class="form-group">
                    <label for="history">Travel History</label>
                    <InputText class="form-control" id="history" @bind-Value="entryRecord.travel_history" />
                </div>
                <div class="form-group">
                    <label for="travelfrom">Travel From</label>
                    <InputText class="form-control" id="travelfrom" @bind-Value="entryRecord.traveled_from" />
                </div>
                <div class="form-group">
                    <label>Entry Point</label>

                    @if (pointslist != null && pointslist?.Count() > 0)
                    {
                        <Typeahead SearchMethod="GetPoints"
                                   Placeholder="Search..."
                                   Items="pointslist"
                                   @bind-Value="selectedPoints">
                            <SelectedTemplate Context="point">
                                @point.name_en
                            </SelectedTemplate>
                            <ResultTemplate Context="point">
                                @point.name_en
                            </ResultTemplate>
                        </Typeahead>
                    }
                </div>
                <div class="form-group">
                    <label for="endate">Entrance Date</label>
                    <input type="datetime-local" @bind="entryRecord.entrance_date" @bind:format="yyyy-MM-ddTHH:mm" class="full form-control" />
                </div>
                <div class="form-group">
                    <label>Entry Reason</label>

                    @if (reasonList != null && reasonList?.Count() > 0)
                    {
                        <Typeahead SearchMethod="GetReason"
                                   Placeholder="Search..."
                                   Items="reasonList"
                                   @bind-Value="selectedReason">
                            <SelectedTemplate Context="station">
                                @station.name_en
                            </SelectedTemplate>
                            <ResultTemplate Context="station">
                                @station.name_en
                            </ResultTemplate>
                        </Typeahead>
                    }
                </div>
                <div class="form-group">
                    <label for="remark">Remark</label>
                    <InputText class="form-control" id="remark" @bind-Value="entryRecord.remark" />
                </div>
            </div>
        </div>
        <div class="row my-row">
            <div class="action-button">
                <button type="submit" class="btn btn-info"><span>Save</span></button>
                @if (entryRecord.id > 0)
                {
                    <button type="button" class="btn btn-danger" @onclick="HandleDelete"><span>Delete</span></button>
                }

                <a href="/entryrecord/list"> <span> Cancel </span></a>
            </div>
        </div>
    </EditForm>
}

<MessageModal @ref="modal" />

@code {
    [Parameter]
    public int EntryRecordId { get; set; }

    private MessageModal modal;
    private en.entry_record entryRecord;
    private bool isMaleCheck, isFemaleCheck;
    private List<en.entry_reason> reasonList;
    private List<en.entry_points> pointslist;

    private en.entry_points selectedPoints { get; set; }
    private en.entry_reason selectedReason { get; set; }

    protected override void OnInitialized()
    {
        va.IsLoading = true;
        entryRecord ??= new en.entry_record();
        reasonList = new List<en.entry_reason>();
        pointslist = new List<en.entry_points>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            StateHasChanged();
        }
    }

    #region Functions

    private async Task GetData()    // get data from server
    {
        try
        {
            var points = await da.entry_points.Get();
            if (points != null)
            {
                pointslist.Clear();
                pointslist.AddRange(points);
            }

            var reasons = await da.entry_reason.Get();
            if (reasons != null)
            {
                reasonList.Clear();
                reasonList.AddRange(reasons);
            }

            if (EntryRecordId > 0)
            {
                entryRecord = await da.entry_record.Get(EntryRecordId);
                selectedPoints = pointslist.Find(points => points.entrypoint_id == entryRecord?.entrypoint_id);
                selectedReason = reasonList.Find(reason => reason.reason_id == entryRecord.reason_id);
                isMaleCheck = entryRecord.gender == en.Gender.Male;
            }

            isFemaleCheck = !isMaleCheck;
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            entryRecord.entrypoint_id = selectedPoints?.entrypoint_id;
            entryRecord.reason_id = selectedReason?.reason_id;

            es.ActionResult result;

            if (entryRecord.id > 0)
                result = await da.entry_record.Update(entryRecord);
            else
                result = await da.entry_record.Insert(entryRecord);

            if (result.Status != es.Status.Success)
            {
                modal.Show("Message", result.Msg);
                return;
            }

            entryRecord = new en.entry_record();
            selectedPoints = null;
            selectedReason = null;
            isMaleCheck = true;
            isFemaleCheck = false;
            NavigationManager.NavigateTo("entryrecord/0");
            await JsService.Toast("toastsave", "Save Success"); 
            await JsService.Focus("entry-name");           
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleDelete()
    {
        bool confirm = await modal.Show("Message", "Are you sure want to delete ?", "Yes", "No");
        if (!confirm)
            return;

        try
        {
            await da.entry_record.Delete(EntryRecordId);

            navMgr.NavigateTo("entryrecord/list");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task<IEnumerable<en.entry_points>> GetPoints(string searchText)
    {
        var text = searchText?.ToLower();
        return await Task.FromResult(pointslist.FindAll(point => point.name_en.ToLower().Contains(text)).OrderBy(o => o.name_en));
    }

    private async Task<IEnumerable<en.entry_reason>> GetReason(string searchText)
    {
        var text = searchText?.ToLower();
        return await Task.FromResult(reasonList.FindAll(reason => reason.name_en.ToLower().Contains(text)).OrderBy(o => o.name_en));
    }

    private void IsCheck(string gender)
    {
        entryRecord.gender = gender;
    }
    #endregion
}

