@page "/entryrecord/{EntryRecordId:int}"

@inject NavigationManager navMgr

<h4 class="header">Entry Record Form</h4>

@if (entryRecord != null)
{
    <EditForm Model="@entryRecord" OnValidSubmit="HandleValidSubmit" autocomplete="off">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">

            <div class="col-sm-6 coll-12">
                <div class="form-group">
                    <label for="name">Name*</label>
                    <InputText class="form-control" id="entry-name" @bind-Value="entryRecord.person_name" autocomplete="off" placeholder="Name" />
                </div>
                <div class="form-group">
                    <label for="phone">Phone Number*</label>
                    <InputText class="form-control" id="phone" @bind-Value="entryRecord.person_ph"
                               autocomplete="off" placeholder="Phone Number" />
                </div>
                <div class="form-group">
                    <div class="custom-control custom-checkbox pb-2">
                        <input class="custom-control-input" type="checkbox" id="nrc" value="@isNRCchk" @bind="@isNRCchk" @oninput="OnChangeNRC">
                        <label class="custom-control-label" for="nrc">NRC</label>
                    </div>
                    <div class="row">
                        <div class="col-sm-2 pad-right-0">
                            @if (stateNumberList != null && stateNumberList?.Count() > 0)
                            {
                                <select @bind="selectedStateNumber" class="form-control" disabled="@(!(isNRCchk))">
                                    @foreach (var nrcno in stateNumberList)
                                    {
                                        <option value="@nrcno">@nrcno</option>
                                    }
                                </select>
                            }
                        </div>

                        <div class="col-sm-4 pad-right-0 pad-left-3">
                            @if (districtList != null && districtList?.Count() > 0)
                            {
                                <select @bind="@selectedDistrict" class="form-control" disabled="@(!(isNRCchk))">
                                    @foreach (var card in districtList)
                                    {
                                        <option value="@card">@card</option>
                                    }
                                </select>
                            }
                        </div>

                        <div class="col-sm-2 pad-right-0 pad-left-3">
                            @if (naList != null && naList?.Count() > 0)
                            {
                                <select @bind="@selectedNa" class="form-control" disabled="@(!(isNRCchk))">
                                    @foreach (var nc in naList)
                                    {
                                        <option value="@nc">@nc</option>
                                    }
                                </select>
                            }
                        </div>

                        <div class="col-sm-4 pad-left-3">
                            <InputText pattern="\d*" class="form-control" id="regno" minlength="6" maxlength="6" placeholder="000000" @bind-Value="nrcRegisterNo" disabled="@(!(isNRCchk))" />
                        </div>


                    </div>
                </div>
                <div class="form-group">
                    <label for="age">Age</label>
                    <InputText class="form-control" id="age" @bind-Value="entryRecord.person_age"
                               autocomplete="off" placeholder="Age" />
                </div>
                <div class="form-group">
                    <label>Gender</label>
                    <div>
                        <div class="custom-control custom-radio custom-control-inline pl-0">
                            <input type="radio" class="custom-control-input" name="radio-group" id="radio1" @onclick="@(()=>IsCheck(en.Gender.Male))" checked="@(entryRecord.gender?.Equals(en.Gender.Male))">
                            <label class="custom-control-label" for="radio1">Male</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline pl-0">
                            <input type="radio" class="custom-control-input" name="radio-group" id="radio2" @onclick="@(()=>IsCheck(en.Gender.Female))" checked="@(entryRecord.gender?.Equals(en.Gender.Female))">
                            <label class="custom-control-label" for="radio2">Female</label>
                        </div>
                    </div>

                    @*<div>
                            <input type="radio" name="radio-group" id="radio1" @onclick="@(()=>IsCheck(en.Gender.Male))" checked="@(entryRecord.gender?.Equals(en.Gender.Male))" />
                            <label for="radio1" class="text-color">Male</label>
                            <input type="radio" name="radio-group" id="radio2" @onclick="@(()=>IsCheck(en.Gender.Female))" checked="@(entryRecord.gender?.Equals(en.Gender.Female))" />
                            <label for="radio2" class="text-color">Female</label>
                        </div>*@
                </div>

                <div class="form-group">
                    <label for="curraddress">Current Address</label>
                    <InputText class="form-control" id="curraddress" @bind-Value="entryRecord.current_address" autocomplete="off" placeholder="Current Address" />
                </div>
                <div class="form-group">
                    <label for="residenceaddr">Residence Address</label>
                    <InputText class="form-control" id="residenceaddr" @bind-Value="entryRecord.residence_address"
                               autocomplete="off" placeholder="Residence Address" />
                </div>

                <div class="form-group">
                    <label for="personal">Personal ID</label>
                    <InputText class="form-control" id="personal" @bind-Value="entryRecord.personal_id"
                               autocomplete="off" placeholder="Personal ID" />
                </div>
            </div>

            <div class="col-sm-6 col-12">

                <div class="form-group">
                    <label for="history">Travel History</label>
                    <InputText class="form-control" id="history" @bind-Value="entryRecord.travel_history"
                               autocomplete="off" placeholder="Travel History" />
                </div>
                <div class="form-group">
                    <label for="travelfrom">Travel From</label>
                    <InputText class="form-control" id="travelfrom" @bind-Value="entryRecord.traveled_from"
                               autocomplete="off" placeholder="Travel From" />
                </div>
                <div class="form-group">
                    <label for="feverhistory">Fever History</label>
                    <InputText class="form-control" id="feverhistory" @bind-Value="entryRecord.fever_history"
                               autocomplete="off" placeholder="Fever History" />
                </div>
                <div class="form-group">
                    <label for="endate">Entrance Date</label>
                    <input type="datetime-local" @bind="entryRecord.entrance_date" @bind:format="yyyy-MM-ddTHH:mm" class="full form-control" />
                </div>
                <div class="form-group">
                    <label>Entry Point</label>

                    @if (pointslist != null && pointslist?.Count() > 0)
                    {
                        <Typeahead SearchMethod="GetPoints"
                                   Placeholder="Search..."
                                   Items="pointslist"
                                   @bind-Value="selectedPoints">
                            <SelectedTemplate Context="point">
                                @point.name_en
                            </SelectedTemplate>
                            <ResultTemplate Context="point">
                                @point.name_en
                            </ResultTemplate>
                        </Typeahead>
                    }
                </div>
                <div class="form-group">
                    <label>Entry Reason</label>
                    @if (reasonList != null && reasonList?.Count() > 0)
                    {
                        <Typeahead SearchMethod="GetReason"
                                   Placeholder="Search..."
                                   Items="reasonList"
                                   @bind-Value="selectedReason">
                            <SelectedTemplate Context="station">
                                @station.name_en
                            </SelectedTemplate>
                            <ResultTemplate Context="station">
                                @station.name_en
                            </ResultTemplate>
                        </Typeahead>
                    }
                </div>
                <div class="form-group">
                    <label for="location">Location</label>
                    @if (locations != null && locations?.Count() > 0)
                    {
                        <Typeahead SearchMethod="GetLocation"
                                   Placeholder="Search..."
                                   Items="locations"
                                   @bind-Value="selectedLocation">
                            <SelectedTemplate Context="location">
                                @location.name_en
                            </SelectedTemplate>
                            <ResultTemplate Context="location">
                                @location.name_en
                            </ResultTemplate>
                        </Typeahead>
                    }
                </div>
                <div class="form-group">
                    <label for="remark">Remark</label>
                    <InputText class="form-control" id="remark" @bind-Value="entryRecord.remark"
                               autocomplete="off" placeholder="Remark" />
                </div>
            </div>

        </div>
        <div class="row my-row">
            <div class="action-button">
                <button type="submit" class="btn btn-info"><span>Save</span></button>
                @if (entryRecord.id > 0)
                {
                    <button type="button" class="btn btn-danger" @onclick="HandleDelete"><span>Delete</span></button>
                }

                <a href="/entryrecord/list"> <span> Cancel </span></a>
            </div>
        </div>
    </EditForm>
}

<MessageModal @ref="modal" />

@code {
    [Parameter]
    public int EntryRecordId { get; set; }

    private MessageModal modal;
    private en.entry_record entryRecord;

    private IEnumerable<string> naList;
    private IEnumerable<string> districtList;
    private IEnumerable<string> stateNumberList;

    private List<en.location> locations;
    private List<en.entry_reason> reasonList;
    private List<en.entry_points> pointslist;

    private string selectedNa { get; set; }
    private string selectedDistrict { get; set; }
    private string selectedStateNumber { get; set; }

    private en.entry_points selectedPoints { get; set; }
    private en.entry_reason selectedReason { get; set; }
    private en.location selectedLocation { get; set; }

    private string nrcRegisterNo;
    private bool isNRCchk;

    protected override void OnInitialized()
    {
        va.IsLoading = true;

        locations = new List<en.location>();
        reasonList = new List<en.entry_reason>();
        pointslist = new List<en.entry_points>();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetData();
    }

    #region Functions

    private async Task GetData()    // get data from server
    {
        try
        {
            va.IsLoading = true;

            var points = await da.entry_points.Get();
            if (points != null)
                pointslist.AddRange(points);

            var reasons = await da.entry_reason.Get();
            if (reasons != null)
                reasonList.AddRange(reasons);

            var location = await da.location.Get();
            if (location != null)
                locations.AddRange(location);

            naList = fn.NRCNaing();
            districtList = fn.NRCDistricts();
            stateNumberList = fn.NRCStateNumbers();

            if (EntryRecordId > 0)
            {
                entryRecord = await da.entry_record.Get(EntryRecordId);
                selectedPoints = pointslist.Find(points => points.entrypoint_id == entryRecord?.entrypoint_id);
                selectedReason = reasonList.Find(reason => reason.reason_id == entryRecord.reason_id);
                selectedLocation = locations.Find(loc => loc.location_id == entryRecord.location_id);

                if (!string.IsNullOrWhiteSpace(entryRecord.person_nrc))
                {
                    var data = fn.SplitNrc(entryRecord.person_nrc);
                    selectedStateNumber = data[0] + '/';
                    selectedDistrict = data[1];
                    selectedNa = '(' + data[2] + ')';
                    nrcRegisterNo = data[3];
                }
                //var returnData = await JSRuntime.InvokeAsync<object>("CustomJsFunctions.splitNrc", entryRecord.person_nrc);
                //var nrcData = JObject.Parse(returnData.ToString());

                //selectedStateNumber = (string)nrcData["sno"];
                //selectedDistrict = (string)nrcData["dis"];
                //selectedNa = (string)nrcData["na"];
                //nrcRegisterNo = (string)nrcData["regno"];
            }
            else
                await ResetData();

            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }

    private async Task ResetData()
    {

        entryRecord = new en.entry_record();
        entryRecord.entrance_date = DateTime.Now;
        //entryRecord.traveled_from = previousEntryRec?.traveled_from; //set previous record

        //set previous record
        //selectedPoints = pointslist.Find(points => points.entrypoint_id == previousEntryRec?.entrypoint_id);
        var lastData = await da.entry_record.GetLastRecord();
        selectedPoints = pointslist.Find(p => p.entrypoint_id == lastData.entrypoint_id);
        selectedReason = reasonList.Find(r => r.reason_id == lastData.reason_id);

        //selectedReason = null;
        selectedStateNumber = null;
        selectedDistrict = null;
        selectedNa = null;
        nrcRegisterNo = null;
        selectedLocation = null;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            entryRecord.entrypoint_id = selectedPoints?.entrypoint_id;
            entryRecord.reason_id = selectedReason?.reason_id;
            entryRecord.location_id = selectedLocation?.location_id;
            entryRecord.person_nrc = selectedStateNumber + selectedDistrict + selectedNa + nrcRegisterNo;

            es.ActionResult result;

            if (entryRecord.id > 0)
                result = await da.entry_record.Update(entryRecord);
            else
                result = await da.entry_record.Insert(entryRecord);

            if (result.Status != es.Status.Success)
            {
                modal.Show("Message", result.Msg);
                return;
            }

            await ResetData();

            NavigationManager.NavigateTo("entryrecord/0");
            await JsService.Toast("toastsave", "Save Success");
            StateHasChanged();
            await JsService.Focus("entry-name");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleDelete()
    {
        bool confirm = await modal.Show("Message", "Are you sure want to delete ?", "Yes", "No");
        if (!confirm)
            return;

        try
        {
            await da.entry_record.Delete(EntryRecordId);
            navMgr.NavigateTo("entryrecord/list");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task<IEnumerable<en.entry_points>> GetPoints(string searchText)
    {
        var text = searchText?.ToLower();
        return await Task.FromResult(pointslist.FindAll(point => point.name_en.ToLower().Contains(text)).OrderBy(o => o.name_en));
    }

    private async Task<IEnumerable<en.entry_reason>> GetReason(string searchText)
    {
        var text = searchText?.ToLower();
        return await Task.FromResult(reasonList.FindAll(reason => reason.name_en.ToLower().Contains(text)).OrderBy(o => o.name_en));
    }

    private async Task<IEnumerable<en.location>> GetLocation(string searchText)
    {
        var text = searchText?.ToLower();
        return await Task.FromResult(locations.FindAll(loc => loc.name_en.ToLower().Contains(text))
         .OrderBy(o => o.name_en));
    }

    private void IsCheck(string gender)
    {
        entryRecord.gender = gender;
    }

    private void OnChangeNRC()
    {
        if (isNRCchk)
        {
            selectedDistrict = string.Empty;
            selectedStateNumber = string.Empty;
            selectedNa = string.Empty;
            nrcRegisterNo = string.Empty;
        }
    }

    //private async Task<IEnumerable<string>> GetNrcNo(string searchText)
    //{
    //    var text = searchText?.ToLower();
    //    return await Task.FromResult(nrcNoList.FindAll(nrcno => nrcno.ToLower().Contains(text)).OrderBy(o => o));
    //}

    //private async Task<IEnumerable<string>> GetNrc(string searchText)
    //{
    //    var text = searchText?.ToLower();
    //    return await Task.FromResult(nrcList.FindAll(nrc => nrc.ToLower().Contains(text)).OrderBy(o => o));
    //}

    //private async Task<IEnumerable<string>> GetNrcCard(string searchText)
    //{
    //    var text = searchText?.ToLower();
    //    return await Task.FromResult(nrcCardList.FindAll(card => card.ToLower().Contains(text)).OrderBy(o => o));
    //}

    #endregion
}

