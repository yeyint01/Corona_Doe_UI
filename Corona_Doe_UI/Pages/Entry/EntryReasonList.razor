@page "/entryreason/list"

<h4 class="header">Entry Reason</h4>

@if (entryReasonResult == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="float-right mb-2">
    <input type="search" placeholder="Search..." @bind="@searchText" @oninput="ChangeSearch" class="search" />
    <button class="btn btn-info"
            @onclick="@(() => NavigationManager.NavigateTo("entryreason/entry/0"))">
        <span>+ Add new</span>
    </button>
</div>

   
        <CustomGrid Entity="en.entry_reason" PagerSize="@(va.IsMobile ? 3 : 5)" PagesCount="@entryReasonResult.PgCount" IsPagingNone="@isCustomPagingNone" TableLayout="table-layout"
                    ItemList="@entryReasonResult.Entry_Reasons" GridRowClick="HandleRowClick" PagerClick="PagerClick" RowsCount="@entryReasonResult.RCount" TablePaging="@(va.IsMobile? "true": "false")">
            <GridHeader>
                <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Myanmar Name" OnHeaderClick="OnHeaderClick" OrderBy="name_mm" />
                <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="English Name" OnHeaderClick="OnHeaderClick" OrderBy="name_en" />
                <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Description" OnHeaderClick="OnHeaderClick" OrderBy="description" />
            </GridHeader>
            <GridRow>
                <td class="w-75-pixel">
                    <span>@context.name_mm</span>
                </td>
                <td>
                    <span>@context.name_en</span>
                </td>
                <td>
                    <span>@context.description</span>
                </td>
            </GridRow>
        </CustomGrid>
    

}

@code {

    private en.entry_reasonResult entryReasonResult;
    private bool isCustomPagingNone;
    private int currentPage;    // paging current click page
    private string searchText;
    private (string OrderBy, en.shared.SortOrder Order) CurSortInfo;
    private MessageModal modal;

    protected override void OnInitialized()
    {
        currentPage = 1;
        entryReasonResult = new en.entry_reasonResult();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            va.IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task GetData()    // get data from server
    {
        try
        {
            entryReasonResult = await da.entry_reason.Get(new en.entry_reasonParam
            {
                Name = searchText,
                PgNo = currentPage,
                Order = CurSortInfo.Order,
                OrderBy = CurSortInfo.OrderBy
            });
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }

    private async Task ChangeSearch(ChangeEventArgs e)
    {
        if (e.Value == null) return;
        searchText = (string)e.Value;
        currentPage = 1;
        await GetData();
    }

    private async Task OnHeaderClick(string orderBy)
    {
        CurSortInfo = fn.CurrentSortInfo(orderBy);
        isCustomPagingNone = true;
        await GetData();
        isCustomPagingNone = false;
    }

    private Task HandleRowClick(en.entry_reason obj)
    {
        NavigationManager.NavigateTo("entryreason/entry/" + obj.reason_id);

        return Task.FromResult<object>(null);
    }

    private async Task PagerClick(int curpage)      // paging clicked event
    {

    }

}
