@page "/entryrecord/list"

@inject NavigationManager navMgr

<h4 class="header">Entry Records</h4>

@if (recordResult == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="mb-3 mt-3 d-flex mr-3">
    <button class="btn btn-info mr-3"
            @onclick="@(() => navMgr.NavigateTo("entryrecord/0"))">
        <span>+ Add new</span>
    </button>
    <SearchBox SearchClick="HandlSearchClick" />
</div>


    <CustomGrid Entity="en.entry_record" PagerSize="@(va.IsMobile ? 3 : 5)" PagesCount="recordResult.PgCount" IsPagingNone="@isCustomPagingNone" TableLayout="table-layout"
                ItemList="@recordResult.Entry_Records" GridRowClick="ShowModel" PagerClick="PagerClick" RowsCount="recordResult.RCount" TablePaging="@(va.IsMobile? "true": "false")">
        <GridHeader>

            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Name*" OnHeaderClick="OnHeaderClick" OrderBy="person_name" />
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Age*" OnHeaderClick="OnHeaderClick" OrderBy="person_age" />
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Current Address*" OnHeaderClick="OnHeaderClick" OrderBy="current_address" />
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Tavel History*" OnHeaderClick="OnHeaderClick" OrderBy="travel_history" />
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Entrance Date*" OnHeaderClick="OnHeaderClick" OrderBy="entrance_date" />
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Remark*" OnHeaderClick="OnHeaderClick" OrderBy="remark" />
        </GridHeader>
        <GridRow>
            <td class="w-75-pixel">
                <span>@context.person_name</span>
            </td>
            <td>
                <span>@context.person_age</span>
            </td>
            <td>
                <span>@context.current_address</span>
            </td>
            <td>
                <span>@context.travel_history</span>
            </td>
            <td>
                <span>@context.entrance_date</span>
            </td>
            <td>
                <span>@context.remark</span>
            </td>
        </GridRow>
    </CustomGrid>

}
<MessageModal @ref="modal" />


@code {
    private en.entry_recordResult recordResult;
    private bool isCustomPagingNone;
    private int currentPage;
    private string searchText;
    private MessageModal modal;
    private (string OrderBy, es.SortOrder Order) CurSortInfo;


    protected override void OnInitialized()
    { va.IsLoading = true;
        recordResult = new en.entry_recordResult();
        currentPage = 1;

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            va.IsLoading = false;
            StateHasChanged();
        }
    }
    private async Task GetData()
    {
        try
        {
            recordResult = await da.entry_record.Get(new en.entry_recordParam
            {
                Name = searchText,
                PgNo = currentPage,
                Order = CurSortInfo.Order,
                OrderBy = CurSortInfo.OrderBy
            });
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }

    }

    private Task ShowModel(en.entry_record obj)     // open entry modal
    {
        navMgr.NavigateTo("entryrecord/" + obj.id);

        return Task.FromResult<object>(null);
    }

    private async Task PagerClick(int curpage)
    {
        currentPage = curpage;
        await GetData();
    }
    private async Task HandlSearchClick(string text)
    {
        searchText = text;
        currentPage = 1;
        await GetData();
    }

    private async Task OnHeaderClick(string orderBy)
    {
        CurSortInfo = fn.CurrentSortInfo(orderBy);
        isCustomPagingNone = true;
        await GetData();
        isCustomPagingNone = false;
    }
    private async Task ChangeSearch(ChangeEventArgs e)
    {
        if (e.Value == null) return;
        searchText = (string)e.Value;
        currentPage = 1;
        await GetData();
    }
}
