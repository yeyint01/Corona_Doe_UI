@page "/entrypoint/{PointID:int}"

<h4 class="header">Entry Point Form</h4>

@if (points == null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="@points" OnValidSubmit="HandleValidSubmit" autocomplete="off">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="usr">Myanmar Name*</label>
        <InputText class="form-control" id="name_mm" @bind-Value="points.name_mm" />
    </div>
    <div class="form-group">
        <label for="pwd">English Name*</label>
        <InputText class="form-control" id="name_en" @bind-Value="points.name_en" />
    </div>
    <div class="form-group">
        <label for="pwd">Remark</label>
        <InputText class="form-control" id="name_en" @bind-Value="points.remark" />
    </div>
    <div class="form-group">
        <button type="button" class="map-btn" @onclick="@MapModalOpen">
            <i class="fa fa-map-marker"></i><span class="pad-left-5">Map</span>
        </button>
    </div>
    <div class="row my-row">
        <div class="action-button">
            <button type="submit" class="btn btn-info"><span>Save</span></button>
            @if (points.entrypoint_id > 0)
            {
                <button type="button" class="btn btn-danger" @onclick="HandleDelete"><span>Delete</span></button>
            }
            <a href="/entrypoint/list"><span> Cancel</span> </a>

        </div>
    </div>
</EditForm>
}

<MessageModal @ref="modal" />

<div class="modal confirm-modal" id="entrypoint-mapModal">
    <div class="modal-dialog-entry">
        <div class="modal-content">
            <div class="modal-header">
                <div class="row my-row">
                    <div class="header-lit-enf pad-top-7">
                        <h6 class="h-style">Map</h6>
                    </div>
                    <div class="ml-auto">
                        <button type="button" class="btn cancel-btn" @onclick="GetLatLon">
                            <i class="fa fa-check"></i>
                        </button>
                        <button type="button" class="btn cancel-btn" @onclick="MapModalClose">
                            <i class="fa fa-ban"></i>
                        </button>
                    </div>
                </div>
            </div>

            @if (isMapOpen)
            {
                <div class="row my-row">
                    <div class="full h-400-pixel">
                        <OpenStreetMap LonValue="@points.lon" LatValue="@points.lat" AllowClickOnMap="true" ChangedLocation="ChangedPointLocation"></OpenStreetMap>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int PointID { get; set; }

    private en.entry_points points;
    private Modal errModal;
    private MessageModal modal;

    private bool isMapOpen;
    private double tempLon, tempLat;

    protected override async Task OnInitializedAsync()
    {
        if (PointID > 0)
            points = await da.entry_points.Get(PointID);

        points ??= new en.entry_points();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            es.ActionResult result;

            if (points.entrypoint_id > 0)
            {
                result = await da.entry_points.Update(points);
            }
            else
            {
                result = await da.entry_points.Insert(points);
            }


            if (result.Status != es.Status.Success)
            {
                modal.Show("Message", result.Msg);
                return;
            }

            NavigationManager.NavigateTo("entrypoint/list");
            await JsService.Toast("toastsave", "Save Success");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleDelete()
    {
        bool confirm = await modal.Show("Message", "Are you sure want to delete ?", "Yes", "No");
        if (!confirm)
            return;

        try
        {
            await da.entry_points.Delete(PointID);

            NavigationManager.NavigateTo("entrypoint/list");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async void MapModalOpen()
    {
        isMapOpen = true;
        await JsService.OpenModal("entrypoint-mapModal");
        StateHasChanged();
    }

    private async void MapModalClose()
    {
        isMapOpen = false;
        await JsService.CloseModal("entrypoint-mapModal");
    }

    private void ChangedPointLocation(double lon, double lat)
    {
        tempLon = Math.Round(lon, 6);
        tempLat = Math.Round(lat, 6);
    }

    private void GetLatLon()
    {
        points.lon = tempLon;
        points.lat = tempLat;
        MapModalClose();
        StateHasChanged();
    }
}