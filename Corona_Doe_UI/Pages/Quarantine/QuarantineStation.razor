@page "/quarantinestation/entry/{StationId:int}"

<h3 class="header">Quarantine Station Form</h3>

@if (quarantineStation == null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="@quarantineStation" OnValidSubmit="HandleValidSubmit" autocomplete="off">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-sm-6">
            <div class="form-group">
                <label>Myanmar Name*</label>
                <InputText class="full form-control" @bind-Value="quarantineStation.name_mm" />
            </div>
            <div class="form-group">
                <label>English Name*</label>
                <InputText class="full form-control" @bind-Value="quarantineStation.name_en" />
            </div>
            <div class="form-group">
                <label>Description</label>
                <InputText class="full form-control" @bind-Value="quarantineStation.description" />
            </div>
            <div class="form-group">
                <label>Location</label>

                @if (locationList != null && locationList?.Count() > 0)
                {
                    <Typeahead SearchMethod="GetLocation"
                               Placeholder="Search..."
                               Items="locationList"
                               @bind-Value="selectedLocation">
                        <SelectedTemplate Context="location">
                            @location.name_en
                        </SelectedTemplate>
                        <ResultTemplate Context="location">
                            @location.name_en
                        </ResultTemplate>
                    </Typeahead>
                }
            </div>

        </div>

        <div class="col-sm-6">
            <div class="form-group">
                <label>Capacity</label>
                <input type="number" class="full form-control" @bind-value="quarantineStation.capacity" />
            </div>
            <div class="form-group">
                <div class="mycheck form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="checkedout" value="@quarantineStation.discontinued" @bind="quarantineStation.discontinued">
                    <label class="form-check-label" for="checkedout">Discontinued</label>
                </div>
            </div>
            @if (quarantineStation.discontinued == true)
            {
                <div class="form-group">
                    <label>Discontinued Date</label>
                    <input type="datetime-local" @bind="quarantineStation.discontinued_date" @bind:format="@va.datetimeformat" class="full form-control" />
                </div>
            }


        </div>
    </div>

    <div class="row my-row">
        <div class="action-button">
            <button type="submit" class="btn btn-info"><span>Save</span></button>

            @if (quarantineStation.station_id > 0)
            {
                <button type="button" class="btn btn-danger" @onclick="HandleDelete"><span>Delete</span></button>
            }

            <a href="quaratinestation/list"> Cancel </a>
        </div>
    </div>

</EditForm>
}

<MessageModal @ref="modal" />

@code {
    [Parameter]
    public int StationId { get; set; }

    private List<en.location> locationList;

    private en.quarantine_station quarantineStation;
    private string msg;
    private MessageModal modal;

    private en.location selectedLocation { get; set; }

    protected override void OnInitialized()
    {
        locationList = new List<en.location>();
        quarantineStation = new en.quarantine_station();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            StateHasChanged();
        }
    }


    private async Task GetData()    // get data from server
    {
        try
        {
            var locations = await da.location.Get();
            if (locations != null)
            {
                locationList.Clear();
                locationList.AddRange(locations);
            }

            if (StationId > 0)
            {
                quarantineStation = await da.quarantine_station.Get(StationId);
                selectedLocation = locationList.Find(location => location.location_id == quarantineStation.location_id);
            }

            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            quarantineStation.location_id = selectedLocation?.location_id;

            es.ActionResult result;

            if (quarantineStation.station_id > 0)
                result = await da.quarantine_station.Update(quarantineStation);
            else
                result = await da.quarantine_station.Insert(quarantineStation);

            if (result.Status != es.Status.Success)
            {
                modal.Show("Message", result.Msg);
                return;
            }

            NavigationManager.NavigateTo("quaratinestation/list");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleDelete()
    {
        bool confirm = await modal.Show("Message", "Are you sure want to delete ?", "Yes", "No");
        if (!confirm)
            return;

        try
        {
            await da.quarantine_station.Delete(StationId);

            NavigationManager.NavigateTo("quaratinestation/list");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task<IEnumerable<en.location>> GetLocation(string searchText)
    {
        var text = searchText?.ToLower();
        return await Task.FromResult(locationList.FindAll(location => location.name_en.ToLower().Contains(text)).OrderBy(o => o.name_en));
    }

}
