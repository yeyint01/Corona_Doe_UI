@page "/confirmrecord/list"
@implements IDisposable

<h3 class="header">Confirm Record</h3>

<div class="mb-3 mt-3 d-flex">
    <button class="btn btn-info mr-3"
            @onclick="@(() => NavigationManager.NavigateTo("confirmrecord/entry/0"))">
        <span>+ Add new</span>
    </button>

    <SearchBox SearchClick="HandlSearchClick" />
</div>

@if (cRecordResult != null)
{
    <CustomGrid Entity="en.confirm_record" PagerSize="@(va.IsMobile ? 3 : 5)" PagesCount="@cRecordResult.PgCount" IsPagingNone="@isCustomPagingNone" TableLayout="table-layout"
                ItemList="@cRecordResult.Confirm_Records" GridRowClick="HandleRowClick" PagerClick="PagerClick" RowsCount="@cRecordResult.RCount" TablePaging="@(va.IsMobile? "true": "false")">
        <GridHeader>
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Name*" OnHeaderClick="OnHeaderClick" OrderBy="patient_name" />
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Phone*" OnHeaderClick="OnHeaderClick" OrderBy="patient_ph" />
            @if (!va.IsMobile)
            {
                <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="NRC" OnHeaderClick="OnHeaderClick" OrderBy="patient_nrc" />
                <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Age" OnHeaderClick="OnHeaderClick" OrderBy="patient_age" />
                <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Gender" OnHeaderClick="OnHeaderClick" OrderBy="gender" />
                <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Home Town" OnHeaderClick="OnHeaderClick" OrderBy="hometown" />
            }
        </GridHeader>
        <GridRow>
            <td>
                <span>@context.patient_name</span>
            </td>
            <td>
                <span>@context.patient_ph</span>
            </td>
            @if (!va.IsMobile)
            {
                <td>
                    <span>@context.patient_nrc</span>
                </td>
                <td>
                    <span>@context.patient_age</span>
                </td>
                <td>
                    <span>@(context.gender == en.Gender.Male ? en.Gender.Male : en.Gender.Female)</span>
                </td>
                <td>
                    <span>@context.hometown</span>
                </td>
            }
        </GridRow>
    </CustomGrid>
}

<MessageModal @ref="modal" />

@code {

    private string searchText;
    private MessageModal modal;
    private bool isCustomPagingNone;
    private int currentPage, gridHeight;
    private en.confirm_recordResult cRecordResult;
    private string elementID = Guid.NewGuid() + "confirmrecordlist";
    private (string OrderBy, en.shared.SortOrder Order) CurSortInfo;

    protected override void OnInitialized()
    {
        va.IsLoading = true;
        currentPage = 1;
        cRecordResult = new en.confirm_recordResult();
        BrowserResize.OnResize += BrowserHasResized;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        BrowserResize.OnResize -= BrowserHasResized;
    }

    #region Functions

    private async Task GetData()    // get data from server
    {
        try
        {
            cRecordResult = await da.confirm_record.Get(new en.confirm_recordParam
            {
                Name = searchText,
                PgNo = currentPage,
                Order = CurSortInfo.Order,
                OrderBy = CurSortInfo.OrderBy
            });
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandlSearchClick(string text)
    {
        searchText = text;
        currentPage = 1;
        await GetData();
    }

    private async Task OnHeaderClick(string orderBy)
    {
        CurSortInfo = fn.CurrentSortInfo(orderBy);
        isCustomPagingNone = true;
        await GetData();
        isCustomPagingNone = false;
    }

    private Task HandleRowClick(en.confirm_record obj)
    {
        NavigationManager.NavigateTo("confirmrecord/entry/" + obj.patient_id);

        return Task.FromResult<object>(null);
    }

    private async Task PagerClick(int curpage)
    {
        currentPage = curpage;
        await GetData();
    }

    private async Task BrowserHasResized()
    {
        gridHeight = await JSRuntime.InvokeAsync<int>("CustomJsFunctions.setGridHeight", elementID);
        StateHasChanged();
    }

    #endregion Functions
}
