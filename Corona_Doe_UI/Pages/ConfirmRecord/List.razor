@page "/confirmrecord/list"

<h3 class="header">Confirm Record</h3>

@if (cRecordResult == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="float-right mb-2">
    <input type="search" placeholder="Search..." @bind="@searchText" @oninput="ChangeSearch" class="search" />
    <button class="btn btn-info"
            @onclick="@(() => NavigationManager.NavigateTo("confirmrecord/entry/0"))">
        + Add new
    </button>
</div>

    <CustomGrid Entity="en.confirm_record" PagerSize="@(va.IsMobile ? 3 : 5)" PagesCount="@cRecordResult.PgCount" IsPagingNone="@isCustomPagingNone" TableLayout="table-layout"
                ItemList="@cRecordResult.Confirm_Records" GridRowClick="HandleRowClick" PagerClick="PagerClick" RowsCount="@cRecordResult.RCount" TablePaging="@(va.IsMobile? "true": "false")">
        <GridHeader>
            <th>Name</th>
            <th>NRC</th>
            <th>Ph</th>
            <th>Age</th>
            <th>Gender</th>
            <th>Home Town</th>
        </GridHeader>
        <GridRow>
            <td>
                <span>@context.patient_name</span>
            </td>
            <td>
                <span>@context.patient_nrc</span>
            </td>
            <td>
                <span>@context.patient_ph</span>
            </td>
            <td>
                <span>@context.patient_age</span>
            </td>
            <td>
                <span>@context.gender</span>
            </td>
            <td>
                <span>@context.hometown</span>
            </td>
            <td>
                <span>@context.remark</span>
            </td>
        </GridRow>
    </CustomGrid>
}

@code {
    private MessageModal modal;
    private en.confirm_recordResult cRecordResult;
    private bool isCustomPagingNone;
    private int currentPage;    // paging current click page
    private string searchText;
    private (string OrderBy, en.shared.SortOrder Order) CurSortInfo;

    protected override void OnInitialized()
    {
        currentPage = 1;
        cRecordResult = new en.confirm_recordResult();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            va.IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task GetData()    // get data from server
    {
        try
        {
            cRecordResult = await da.confirm_record.Get(new en.confirm_recordParam
            {
                Name = searchText,
                PgNo = currentPage,
                Order = CurSortInfo.Order,
                OrderBy = CurSortInfo.OrderBy
            });
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }

    private async Task ChangeSearch(ChangeEventArgs e)
    {
        if (e.Value == null) return;
        searchText = e.Value.ToString(); ;
        currentPage = 1;
        await GetData();
    }

    private async Task OnHeaderClick(string orderBy)
    {
        CurSortInfo = fn.CurrentSortInfo(orderBy);
        isCustomPagingNone = true;
        await GetData();
        isCustomPagingNone = false;
    }

    private Task HandleRowClick(en.confirm_record obj)
    {
        NavigationManager.NavigateTo("confirmrecord/entry/" + obj.patient_id);

        return Task.FromResult<object>(null);
    }

    private async Task PagerClick(int curpage)
    {
        currentPage = curpage;
        await GetData();
    }
}
