@page "/confirmrecord/entry/{PatientId:int}"

<h4 class="header">Confirm Record Form</h4>

@if (confirmrecord != null)
{
    <EditForm Model="@confirmrecord" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Quarantine</label>
                    @if (qRecordList != null && qRecordList?.Count() > 0)
                    {
                        <Typeahead SearchMethod="GetQuaRecord"
                                   Placeholder="Search..."
                                   Items="qRecordList"
                                   @bind-Value="selectedQuaRecord">
                            <SelectedTemplate Context="name">
                                @name.person_name
                            </SelectedTemplate>
                            <ResultTemplate Context="name">
                                @name.person_name
                            </ResultTemplate>
                        </Typeahead>
                    }
                    else
                    {
                        <div class="full form-control h-35-pixel"></div>
                    }
                </div>
                <div class="form-group">
                    <label>Station</label>
                    @if (qStationList != null && qStationList?.Count() > 0)
                    {
                        <Typeahead SearchMethod="GetQuaStation"
                                   Placeholder="Search..."
                                   Items="qStationList"
                                   @bind-Value="selectedQuaStation">
                            <SelectedTemplate Context="name">
                                @name.name_en
                            </SelectedTemplate>
                            <ResultTemplate Context="name">
                                @name.name_en
                            </ResultTemplate>
                        </Typeahead>
                    }
                    else
                    {
                        <div class="full form-control h-35-pixel"> </div>
                    }
                </div>
                <div class="form-group">
                    <label>Patient Name*</label>
                    <InputText class="full form-control" @bind-Value="confirmrecord.patient_name" autocomplete="off" placeholder="Patient Name" />
                </div>
                <div class="form-group">
                    <label>Phone Number*</label>
                    <InputText class="full form-control" @bind-Value="confirmrecord.patient_ph" autocomplete="off" placeholder="Phone Number" />
                </div>
                <div class="form-group">
                    <div class="custom-control custom-checkbox pb-2">
                        <input class="custom-control-input" type="checkbox" id="nrc" value="@isNRCchk" @bind="@isNRCchk" @oninput="OnChangeNRC">
                        <label class="custom-control-label" for="nrc">NRC</label>
                    </div>
                    @*<InputText class="full form-control" @bind-Value="confirmrecord.patient_nrc" autocomplete="off" placeholder="NRC" disabled="@(!(isNRCchk))" />*@
                    <div class="row my-row">
                        <div class="col-2 pad-zero">
                            @if (stateNumberList != null && stateNumberList?.Count() > 0)
                            {
                                <select @bind="selectedStateNumber" class="form-control pad-zero" disabled="@(!(isNRCchk))">
                                    @foreach (var nrcno in stateNumberList)
                                    {
                                        <option value="@nrcno">@nrcno</option>
                                    }
                                </select>
                            }
                        </div>

                        <div class="col-4 pad-right-0 pad-left-3">
                            @if (districtList != null && districtList?.Count() > 0)
                            {
                                <select @bind="@selectedDistrict" class="form-control pad-zero" disabled="@(!(isNRCchk))">
                                    @foreach (var card in districtList)
                                    {
                                        <option value="@card">@card</option>
                                    }
                                </select>
                            }
                        </div>

                        <div class="col-2 pad-right-0 pad-left-3">
                            @if (naList != null && naList?.Count() > 0)
                            {
                                <select @bind="@selectedNa" class="form-control pad-zero" disabled="@(!(isNRCchk))">
                                    @foreach (var nc in naList)
                                    {
                                        <option value="@nc">@nc</option>
                                    }
                                </select>
                            }
                        </div>

                        <div class="col-4 pad-left-3 pad-zero">
                            <input type="text" pattern="\d*" class="form-control pad-5" id="regno" minlength="6" maxlength="6" placeholder="000000" @bind="nrcRegisterNo" autocomplete="off" disabled="@(!(isNRCchk))" />
                        </div>
                        @if (!string.IsNullOrWhiteSpace(customWarning))
                        {
                            <label for="errconfirmPwd" style="color: red;">@customWarning</label>
                        }
                    </div>
                </div>
                <div class="form-group">
                    <label>Age</label>
                    <InputText class="full form-control" @bind-Value="confirmrecord.patient_age" autocomplete="off" placeholder="Age" />
                </div>
                <div class="form-group">
                    <label>Date of Birth</label>
                    <input type="datetime-local" @bind="confirmrecord.patient_dob" @bind:format="@va.datetimeformat" class="full form-control" />
                </div>
                <div class="form-group">
                    <label>Gender</label>
                    @*<div>
                            <input type="radio" name="radio-group" id="radio1" @onclick="@(()=>IsCheck(en.Gender.Male))" checked="@isMaleCheck" />
                            <label for="radio1" class="text-color">Male</label>
                            <input type="radio" name="radio-group" id="radio2" @onclick="@(()=>IsCheck(en.Gender.Female))" checked="@isFemaleCheck" />
                            <label for="radio2" class="text-color">Female</label>
                        </div>*@
                    <div>
                        <div class="custom-control custom-radio custom-control-inline pl-0">
                            <input type="radio" class="custom-control-input" name="radio-group" id="radio1" @onclick="@(()=>IsCheck(en.Gender.Male))" checked="@(confirmrecord.gender?.Equals(en.Gender.Male))">
                            <label class="custom-control-label" for="radio1">Male</label>
                        </div>
                        <div class="custom-control custom-radio custom-control-inline pl-0">
                            <input type="radio" class="custom-control-input" name="radio-group" id="radio2" @onclick="@(()=>IsCheck(en.Gender.Female))" checked="@(confirmrecord.gender?.Equals(en.Gender.Female))">
                            <label class="custom-control-label" for="radio2">Female</label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label>Home Town</label>
                    <InputText class="full form-control" @bind-Value="confirmrecord.hometown" autocomplete="off" placeholder="Home Town" />
                </div>
                <div class="form-group">
                    <label>Reason</label>

                    @if (eReasonList != null && eReasonList?.Count() > 0)
                    {
                        <Typeahead SearchMethod="GetReson"
                                   Placeholder="Search..."
                                   Items="eReasonList"
                                   @bind-Value="selectedReson">
                            <SelectedTemplate Context="name">
                                @name.name_en
                            </SelectedTemplate>
                            <ResultTemplate Context="name">
                                @name.name_en
                            </ResultTemplate>
                        </Typeahead>
                    }
                    else
                    {
                        <div class="full form-control h-35-pixel"> </div>
                    }
                </div>
            </div>

            <div class="col-sm-6">
                <div class="form-group">
                    <label>Travel History</label>
                    <InputText class="full form-control" @bind-Value="confirmrecord.travel_history" autocomplete="off" placeholder="Travel Hisotry" />
                </div>
                <div class="form-group">
                    <label>Residence Address</label>
                    <InputText class="full form-control" @bind-Value="confirmrecord.residence_address" autocomplete="off" placeholder="Residence Address" />
                </div>
                <div class="form-group">
                    <label>Current Address</label>
                    <InputText class="full form-control" @bind-Value="confirmrecord.current_address" autocomplete="off" placeholder="Current Address" />
                </div>
                <div class="form-group">
                    <label>Traveled From</label>
                    <InputText class="full form-control" @bind-Value="confirmrecord.traveled_from" autocomplete="off" placeholder="Traveled From" />
                </div>
                <div class="form-group">
                    <label>Fever History</label>
                    <InputText class="full form-control" @bind-Value="confirmrecord.fever_history" autocomplete="off" placeholder="Fever History" />
                </div>
                <div class="form-group">
                    <label>Remark</label>
                    <InputText class="full form-control" @bind-Value="confirmrecord.remark" autocomplete="off" placeholder="Remark" />
                </div>
                <div class="form-group">
                    <label>Check Out Date</label>
                    <input type="datetime-local" @bind="confirmrecord.result_date" @bind:format="@va.datetimeformat" class="full form-control" />
                </div>
                <div class="form-group">
                    <label>Result</label>
                    <InputText class="full form-control" @bind-Value="confirmrecord.result" autocomplete="off" placeholder="Result" />
                </div>
            </div>
        </div>

        <div class="row my-row">
            <div class="action-button">
                <button type="submit" class="btn btn-info"><span>Save</span></button>

                @if (confirmrecord.patient_id > 0)
                {
                    <button type="button" class="btn btn-danger" @onclick="HandleDelete"><span>Delete</span></button>
                }

                <a href="confirmrecord/list"> Cancel </a>
            </div>
        </div>

    </EditForm>
}

<MessageModal @ref="modal" />

@code {
    [Parameter]
    public int PatientId { get; set; }

    private MessageModal modal;
    //private bool isMaleCheck, isFemaleCheck;
    private en.confirm_record confirmrecord;
    private List<en.quarantine_record> qRecordList;
    private List<en.quarantine_station> qStationList;
    private List<en.entry_reason> eReasonList;

    private en.quarantine_record selectedQuaRecord { get; set; }
    private en.quarantine_station selectedQuaStation { get; set; }
    private en.entry_reason selectedReson { get; set; }

    private bool isNRCchk;
    private string nrcRegisterNo, customWarning;
    private string selectedNa { get; set; }
    private string selectedDistrict { get; set; }
    private string selectedStateNumber { get; set; }

    private IEnumerable<string> naList;
    private IEnumerable<string> districtList;
    private IEnumerable<string> stateNumberList;
    protected override void OnInitialized()
    {
        va.IsLoading = true;
        eReasonList = new List<en.entry_reason>();
        qRecordList = new List<en.quarantine_record>();
        qStationList = new List<en.quarantine_station>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            StateHasChanged();
        }
    }

    #region Functions

    private async Task GetData()
    {
        try
        {

            var qRecords = await da.quarantine_record.Get();
            if (qRecords != null)
                qRecordList.AddRange(qRecords);

            var qStations = await da.quarantine_station.Get();
            if (qStations != null)
                qStationList.AddRange(qStations);

            var eReasons = await da.entry_reason.Get();
            if (eReasons != null)
                eReasonList.AddRange(eReasons);

            naList = fn.NRCNaing();
            districtList = fn.NRCDistricts();
            stateNumberList = fn.NRCStateNumbers();

            if (PatientId > 0)
            {
                confirmrecord = await da.confirm_record.Get(PatientId);
                selectedQuaRecord = qRecordList.Find(qr => qr.quarantine_id == confirmrecord?.quarantine_id);
                selectedQuaStation = qStationList.Find(qs => qs.station_id == confirmrecord.station_id);
                selectedReson = eReasonList.Find(r => r.reason_id == confirmrecord.reason_id);
                // isFemaleCheck = confirmrecord.gender == en.Gender.Female;

                if (!string.IsNullOrWhiteSpace(confirmrecord.patient_nrc))
                {
                    var data = fn.SplitNrc(confirmrecord.patient_nrc);
                    if (data.Length == 4)
                    {
                        selectedStateNumber = data[0] + '/';
                        selectedDistrict = data[1];
                        selectedNa = '(' + data[2] + ')';
                        nrcRegisterNo = data[3];
                        isNRCchk = true;
                    }
                }
            }
            else
            {
                ResetData();
            }
            //isMaleCheck = !isFemaleCheck;

            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }
    private void ResetData()
    {
        confirmrecord = new en.confirm_record();
        selectedQuaRecord = null;
        selectedQuaStation = null;
        selectedReson = null;

        selectedStateNumber = "";
        selectedDistrict = "";
        selectedNa = "";
        nrcRegisterNo = "";
        isNRCchk = false;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!NRCValidation()) return;

            es.ActionResult result;

            if (selectedQuaRecord != null)
                confirmrecord.quarantine_id = selectedQuaRecord.quarantine_id;
            if (selectedQuaStation != null)
                confirmrecord.station_id = selectedQuaStation.station_id;
            if (selectedReson != null)
                confirmrecord.reason_id = selectedReson.reason_id;
            confirmrecord.patient_nrc = selectedStateNumber + selectedDistrict + selectedNa + nrcRegisterNo;

            if (confirmrecord.patient_id > 0)
                result = await da.confirm_record.Update(confirmrecord);
            else
                result = await da.confirm_record.Insert(confirmrecord);

            if (result.Status != es.Status.Success)
            {
                modal.Show("Message", result.Msg);
                return;
            }

            ResetData();

            NavigationManager.NavigateTo("confirmrecord/list");
            await JsService.Toast("toastsave", "Save Success");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleDelete()
    {
        bool confirm = await modal.Show("Message", "Are you sure want to delete ?", "Yes", "No");
        if (!confirm)
            return;

        try
        {
            await da.confirm_record.Delete(PatientId);

            NavigationManager.NavigateTo("confirmrecord/list");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task<IEnumerable<en.quarantine_record>> GetQuaRecord(string searchText)
    {
        var text = searchText?.ToLower();
        return await Task.FromResult(qRecordList.FindAll(qr => qr.person_name.ToLower().Contains(text)).OrderBy(o => o.person_name));
    }

    private async Task<IEnumerable<en.quarantine_station>> GetQuaStation(string searchText)
    {
        var text = searchText?.ToLower();
        return await Task.FromResult(qStationList.FindAll(qs => qs.name_en.ToLower().Contains(text)).OrderBy(o => o.name_en));
    }

    private async Task<IEnumerable<en.entry_reason>> GetReson(string searchText)
    {
        var text = searchText?.ToLower();
        return await Task.FromResult(eReasonList.FindAll(qr => qr.name_en.ToLower().Contains(text)).OrderBy(o => o.name_en));
    }

    private void IsCheck(string gender)
    {
        confirmrecord.gender = gender;
    }
    private void OnChangeNRC()
    {
        if (isNRCchk)
        {
            selectedStateNumber = null;
            selectedDistrict = null;
            selectedNa = null;
            nrcRegisterNo = null;
            customWarning = null;
        }
    }
    #endregion
    #region Validation
    private bool NRCValidation()
    {
        bool result = false;
        if (isNRCchk)
        {
            if (string.IsNullOrEmpty(selectedDistrict) & string.IsNullOrEmpty(selectedNa) & string.IsNullOrEmpty(selectedStateNumber) & string.IsNullOrEmpty(nrcRegisterNo))
            {
                customWarning = "Please select NRC.";
                result = false;
            }
            else
            {
                customWarning = null;
                result = true;
            }
        }
        else
        {
            customWarning = null;
            result = true;
        }
        return result;
    }
    #endregion
}
