@page "/location/entry/{LocationId:int}"

<h4 class="header">Location Form</h4>

@if (location != null)
{
<EditForm Model="@location" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="myanname">Myanmar Name*</label>
        <InputText class="form-control" id="name_mm" @bind-Value="location.name_mm" autocomplete="off" />
    </div>

    <div class="form-group">
        <label for="engname">English Name*</label>
        <InputText class="form-control" id="name_en" @bind-Value="location.name_en" autocomplete="off" />
    </div>
    <div class="form-group">
        <label>Location Type</label>
        @if (locationTypeList != null && locationTypeList?.Count() > 0)
        {
            <Typeahead SearchMethod="GetLocationType"
                       Placeholder="Search..."
                       Items="locationTypeList"
                       @bind-Value="selectedLoctype">
                <SelectedTemplate Context="locationtype">
                    @locationtype.name_en
                </SelectedTemplate>
                <ResultTemplate Context="locationtype">
                    @locationtype.name_en
                </ResultTemplate>
            </Typeahead>
        }
        else
        {
            <div class="full form-control h-35-pixel"></div>
        }
    </div>
    <div class="row my-row">
        <div class="action-button">

            <button type="submit" class="btn btn-info"><span>Save</span></button>
            @if (location.location_id > 0)
            {
                <button type="button" class="btn btn-danger" @onclick="HandleDelete"><span>Delete</span></button>
            }

            <a href="location/list"> Cancel </a>
        </div>
    </div>

</EditForm>
}

<MessageModal @ref="modal" />

@code {

    [Parameter]
    public int LocationId { get; set; }

    en.location location;
    private MessageModal modal;
    private List<en.location_type> locationTypeList;

     private en.location_type selectedLoctype { get; set; }

    protected override void OnInitialized()
    {
        va.IsLoading = true;
        locationTypeList = new List<en.location_type>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            StateHasChanged();
        }
    }

    #region Functions

    private async Task GetData()
    {
        try
        {
            var loctypes = await da.location_type.Get();
            if (loctypes != null)
                locationTypeList.AddRange(loctypes);

            if (LocationId > 0)
            {
                location = await da.location.Get(LocationId);
                selectedLoctype = locationTypeList.Find(l => l.locationtype_id == location.locationtype_id);
            }

            location ??= new en.location();
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
            va.IsLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            es.ActionResult result;

            location.locationtype_id = selectedLoctype?.locationtype_id;

            if (location.location_id > 0)
                result = await da.location.Update(location);
            else
                result = await da.location.Insert(location);

            if (result.Status != es.Status.Success)
            {
                modal.Show("Message", result.Msg);
                return;
            }

            NavigationManager.NavigateTo("location/list");
            await JsService.Toast("toastsave", "Save Success");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleDelete()
    {
        bool confirm = await modal.Show("Message", "Are you sure want to delete ?", "Yes", "No");
        if (!confirm)
            return;

        try
        {
            await da.location.Delete(LocationId);

            NavigationManager.NavigateTo("location/list");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }
    private async Task<IEnumerable<en.location_type>> GetLocationType(string searchText)
    {
        var text = searchText?.ToLower();
        return await Task.FromResult(locationTypeList.FindAll(reason => reason.name_en.ToLower().Contains(text)).OrderBy(o => o.name_en));
    }

    #endregion
}
