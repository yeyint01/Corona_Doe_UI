@page "/locationtype/list"

<h4 class="header">Location Type</h4>

@if (locationTypeResult == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="float-right mb-2">
    <input type="search" placeholder="Search..." @bind="@searchText" @oninput="ChangeSearch" class="search" />
    <button class="btn btn-info"
            @onclick="@(() => NavigationManager.NavigateTo("location/entry/0"))">
        <span> + Add new </span>
    </button>
</div>
<CustomGrid Entity="en.location_type" PagerSize="@(va.IsMobile ? 3 : 5)" PagesCount="locationTypeResult.PgCount" IsPagingNone="@isCustomPagingNone" TableLayout="table-layout"
            ItemList="@locationTypeResult.location_Types" GridRowClick="HandleRowClick" PagerClick="PagerClick" RowsCount="locationTypeResult.RCount" TablePaging="@(va.IsMobile? "true": "false")">
    <GridHeader>
        <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Myanmar Name" OnHeaderClick="OnHeaderClick" OrderBy="name_mm" />
        <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="English Name" OnHeaderClick="OnHeaderClick" OrderBy="name_en" />
    </GridHeader>
    <GridRow>
        <td class="w-75-pixel">
            <span>@context.name_mm</span>
        </td>
        <td>
            <span>@context.name_en</span>
        </td>
    </GridRow>
</CustomGrid>
}

<MessageModal @ref="modal" />


@code {

    private int currentPage;    // paging current click page
    private string searchText;
    private MessageModal modal;
    private bool isCustomPagingNone;
    private en.location_typeResult locationTypeResult;
    private (string OrderBy, en.shared.SortOrder Order) CurSortInfo;

    protected override void OnInitialized()
    {
        currentPage = 1;
        locationTypeResult = new en.location_typeResult();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            va.IsLoading = false;
            StateHasChanged();
        }
    }

    #region Functions

    private async Task GetData()    // get data from server
    {
        try
        {
            locationTypeResult = await da.location_type.Get(new en.location_typeParam
            {
                Name = searchText,
                PgNo = currentPage,
                Order = CurSortInfo.Order,
                OrderBy = CurSortInfo.OrderBy
            });
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }

    private async Task ChangeSearch(ChangeEventArgs e)
    {
        if (e.Value == null) return;
        searchText = (string)e.Value;
        currentPage = 1;
        await GetData();
    }

    private async Task OnHeaderClick(string orderBy)
    {
        CurSortInfo = fn.CurrentSortInfo(orderBy);
        isCustomPagingNone = true;
        await GetData();
        isCustomPagingNone = false;
    }

    private Task HandleRowClick(en.location_type obj)
    {
        NavigationManager.NavigateTo("locationtype/entry/" + obj.locationtype_id);

        return Task.FromResult<object>(null);
    }

    private async Task PagerClick(int curpage)      // paging clicked event
    {
        currentPage = curpage;
        await GetData();
    }

    #endregion
}
