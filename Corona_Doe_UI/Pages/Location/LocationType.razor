@page "/locationtype/entry/{LocationTypeId:int}"

<h4 class="header">Location Type Form</h4>

@if (locationtype != null)
{
<EditForm Model="@locationtype" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-sm-6">

            <div class="form-group">
                <label for="myanname">Myanmar Name*</label>
                <InputText class="form-control" id="name_mm" @bind-Value="locationtype.name_mm" autocomplete="off" />
            </div>

            <div class="form-group">
                <label for="engname">English Name*</label>
                <InputText class="form-control" id="name_en" @bind-Value="locationtype.name_en" autocomplete="off" />
            </div>

        </div>
        <div class="col-sm-6">
            <div class="form-group">
                <label>Region</label>
                @if (regionList != null && regionList?.Count() > 0)
                {
                    <Typeahead SearchMethod="GetRegion"
                               Placeholder="Search..."
                               Items="regionList"
                               @bind-Value="selectedRegion">
                        <SelectedTemplate Context="region">
                            @region.name_en
                        </SelectedTemplate>
                        <ResultTemplate Context="region">
                            @region.name_en
                        </ResultTemplate>
                    </Typeahead>
                }
                else
                {
                    <div class="full form-control h-35-pixel"></div>
                }
            </div>
            <div class="form-group">
                <label for="townshipcode">Township code</label>
                <InputText class="form-control" id="townshipcode" @bind-Value="locationtype.tcode" autocomplete="off" />
            </div>
        </div>
    </div>
    <div style="height: @(va.IsMobile ? "250px": "285px");">
        <OpenStreetMap LatValue="locationtype.lat" LonValue="locationtype.lng" AllowClickOnMap="true" ChangedLocation="ChangedPointLocation"></OpenStreetMap>
    </div>
    <div class="row my-row">
        <div class="action-button">
            <button type="submit" class="btn btn-info"><span>Save</span></button>
            @if (locationtype.locationtype_id > 0)
            {
                <button type="button" class="btn btn-danger" @onclick="HandleDelete"><span>Delete</span></button>
            }

            <a href="locationtype/list"> Cancel </a>
        </div>
    </div>

</EditForm>
}

<MessageModal @ref="modal" />

@code {

    [Parameter]
    public int LocationTypeId { get; set; }

    private MessageModal modal;
    private en.location_type locationtype { get; set; }
    private en.region selectedRegion { get; set; }
    private List<en.region> regionList;


    protected override void OnInitialized()
    {
        va.IsLoading = true;
        regionList = new List<en.region>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            StateHasChanged();
        }
    }
    #region Fuunctions

    private async Task GetData()
    {
        try
        {
            var regions = await da.region.Get();
            if (regions != null)
                regionList.AddRange(regions);

            if (LocationTypeId > 0)
            {
                locationtype = await da.location_type.Get(LocationTypeId);
                selectedRegion = regionList.Find(r => r.region_id == locationtype?.region_id);

            }

            locationtype ??= new en.location_type();
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
            va.IsLoading = false;
        }
    }
    private async Task HandleValidSubmit()
    {
        try
        {
            es.ActionResult result;

            locationtype.region_id = selectedRegion?.region_id;

            if (locationtype.locationtype_id > 0)
                result = await da.location_type.Update(locationtype);
            else
                result = await da.location_type.Insert(locationtype);

            if (result.Status != es.Status.Success)
            {
                modal.Show("Message", result.Msg);
                return;
            }

            NavigationManager.NavigateTo("locationtype/list");
            await JsService.Toast("toastsave", "Save Success");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleDelete()
    {
        bool confirm = await modal.Show("Message", "Are you sure want to delete ?", "Yes", "No");
        if (!confirm)
            return;

        try
        {
            await da.location_type.Delete(LocationTypeId);

            NavigationManager.NavigateTo("locationtype/list");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task<IEnumerable<en.region>> GetRegion(string searchText)
    {
        var text = searchText?.ToLower();
        return await Task.FromResult(regionList.FindAll(r => r.name_en.ToLower().Contains(text)).OrderBy(o => o.name_en));
    }

    private void ChangedPointLocation(double lon, double lat)
    {
        locationtype.lng = (float)lon;
        locationtype.lat = (float)lat;
    }
    #endregion
}
