@page "/region/entry/{RegionId:int}"

<h4 class="header">Region Form</h4>

@if (region != null)
{
    <EditForm Model="@region" OnValidSubmit="HandleValidSubmit" autocomplete="off">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="usr">Myanmar Name*</label>
            <InputText class="form-control" id="name_mm" @bind-Value="region.name_mm" />
        </div>
        <div class="form-group">
            <label for="pwd">English Name*</label>
            <InputText class="form-control" id="name_en" @bind-Value="region.name_en" />
        </div>

        <div class="row my-row">
            <div class="action-button">
                <button type="submit" class="btn btn-info"><span>Save</span></button>

                @if (region.region_id > 0)
                {
                    <button type="button" class="btn btn-danger" @onclick="HandleDelete"><span>Delete</span></button>
                }

                <a href="region/list"> <span>Cancel</span> </a>
            </div>
        </div>

    </EditForm>
}

<MessageModal @ref="modal" />

@code {

    [Parameter]
    public int RegionId { get; set; }

    private en.region region;
    private MessageModal modal;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            va.IsLoading = true;
            if (RegionId > 0)
                region = await da.region.Get(RegionId);

            region ??= new en.region();
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }

    #region Functions

    private async Task HandleValidSubmit()
    {
        try
        {
            es.ActionResult result;

            if (region.region_id > 0)
                result = await da.region.Update(region);
            else
                result = await da.region.Insert(region);

            if (result.Status != es.Status.Success)
            {
                modal.Show("Message", result.Msg);
                return;
            }

            NavigationManager.NavigateTo("region/list");
            await JsService.Toast("toastsave", "Save Success");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleDelete()
    {
        bool confirm = await modal.Show("Message", "Are you sure want to delete ?", "Yes", "No");
        if (!confirm)
            return;

        try
        {
            await da.region.Delete(RegionId);

            NavigationManager.NavigateTo("region/list");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    #endregion
}
