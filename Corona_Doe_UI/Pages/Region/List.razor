@page "/region/list"

<h4 class="header">Region</h4>

@if (regionResult == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mb-3 mt-3 d-flex">
        <button class="btn btn-info mr-3"
                @onclick="@(() => NavigationManager.NavigateTo("region/entry/0"))">
            <span>+ Add new</span>
        </button>

        <SearchBox SearchClick="HandlSearchClick" />
    </div>

    <CustomGrid Entity="en.region" PagerSize="@(va.IsMobile ? 3 : 5)" PagesCount="@regionResult.PgCount" IsPagingNone="@isCustomPagingNone" TableLayout="table-layout"
                ItemList="@regionResult.Regions" GridRowClick="HandleRowClick" PagerClick="PagerClick" RowsCount="@regionResult.RCount" TablePaging="@(va.IsMobile? "true": "false")">
        <GridHeader>
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="Myanmar Name*" OnHeaderClick="OnHeaderClick" OrderBy="name_mm" />
            <SortableHeader CurOrder="CurSortInfo.Order" CurOrderBy="@CurSortInfo.OrderBy" Label="English Name*" OnHeaderClick="OnHeaderClick" OrderBy="name_en" />
        </GridHeader>
        <GridRow>
            <td>
                <span>@context.name_mm</span>
            </td>
            <td class="w-75-pixel">
                <span>@context.name_en</span>
            </td>
        </GridRow>
    </CustomGrid>
}

<MessageModal @ref="modal" />

@code {
    private MessageModal modal;
    private en.regionResult regionResult;
    private bool isCustomPagingNone;
    private int currentPage;    // paging current click page
    private string searchText;
    private (string OrderBy, en.shared.SortOrder Order) CurSortInfo;

    protected override void OnInitialized()
    {
        va.IsLoading = true;
        currentPage = 1;
        regionResult = new en.regionResult();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            va.IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task GetData()    // get data from server
    {
        try
        {
            regionResult = await da.region.Get(new en.regionParam
            {
                Name = searchText,
                PgNo = currentPage,
                Order = CurSortInfo.Order,
                OrderBy = CurSortInfo.OrderBy
            });
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandlSearchClick(string text)
    {
        searchText = text;
        currentPage = 1;
        await GetData();
    }

    private async Task OnHeaderClick(string orderBy)
    {
        CurSortInfo = fn.CurrentSortInfo(orderBy);
        isCustomPagingNone = true;
        await GetData();
        isCustomPagingNone = false;
    }

    private Task HandleRowClick(en.region obj)
    {
        NavigationManager.NavigateTo("region/entry/" + obj.region_id);

        return Task.FromResult<object>(null);
    }

    private async Task PagerClick(int curpage)
    {
        currentPage = curpage;
        await GetData();
    }
}
