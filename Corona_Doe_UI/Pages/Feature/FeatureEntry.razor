@page "/feature/entry/{FeatureId:int}"

<h3 class="header">Feature Form</h3>

@if (feature != null)
{
    <EditForm Model="@feature" OnValidSubmit="HandleValidSubmit" autocomplete="off">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">
                    <label>Name*</label>
                    <InputText class="full form-control" @bind-Value="feature.name" />
                </div>
                <div class="form-group">
                    <label>Place*</label>
                    <InputText class="full form-control" @bind-Value="feature.place" />
                </div>
                <div class="form-group">
                    <label>Type</label>
                    <InputText class="full form-control" @bind-Value="feature.type" />
                </div>
                <div class="form-group">
                    <label>Stay Time*</label>
                    <InputText class="full form-control" @bind-Value="feature.staytimes" />
                </div>
                <div class="form-group">
                    <label>From Time</label>
                    <InputNumber type="long" class="full form-control" @bind-Value="feature.fromtime" />
                </div>
                <div class="form-group">
                    <label>To Time</label>
                    <InputNumber type="long" class="full form-control" @bind-Value="feature.totime" />
                </div>
                <div class="form-group">
                    <label>Source</label>
                    <InputText class="full form-control" @bind-Value="feature.staytimes" />
                </div>
            </div>

            <div class="col-sm-6">
                <div class="form-group">
                    <label>Point X</label>
                    <InputNumber type="float" class="full form-control" @bind-Value="feature.pointx" />
                </div>
                <div class="form-group">
                    <label>Point Y</label>
                    <InputNumber type="float" class="full form-control" @bind-Value="feature.pointy" />
                </div>
                <div class="form-group">
                    <label>Coordinate X</label>
                    <InputNumber type="float" class="full form-control" @bind-Value="feature.coordinatesx" />
                </div>
                <div class="form-group">
                    <label>Coordinate Y</label>
                    <InputNumber type="float" class="full form-control" @bind-Value="feature.coordinatesy" />
                </div>
                <div class="form-group">
                    <label>Geometry Type</label>
                    <InputText class="full form-control" @bind-Value="feature.geometrytype" />
                </div>
                <div class="form-group">
                    <label>Comments</label>
                    <InputText class="full form-control" @bind-Value="feature.comments" />
                </div>
                <div class="form-group">
                    <label>Remark</label>
                    <InputText class="full form-control" @bind-Value="feature.remark" />
                </div>
            </div>
            </div>

        <div class="row my-row">
            <div class="action-button">
                <button type="submit" class="btn btn-info"><span>Save</span></button>

                @if (feature.feature_id > 0)
                {
                    <button type="button" class="btn btn-danger" @onclick="HandleDelete"><span>Delete</span></button>
                }

                <a href="feature/list"> Cancel </a>
            </div>
        </div>

    </EditForm>
}

<MessageModal @ref="modal" />

@code {
    [Parameter]
    public int FeatureId { get; set; }

    private string msg;
    private MessageModal modal;
    private en.features feature;

    protected override void OnInitialized()
    {
        va.IsLoading = true;
        feature = new en.features();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
            StateHasChanged();
        }
    }

    #region Functions

    private async Task GetData()    // get data from server
    {
        try
        {
            if (FeatureId > 0)
            {
                feature = await da.features.Get(FeatureId);
            }
            va.IsLoading = false;
        }
        catch (Exception ex)
        {
            va.IsLoading = false;
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            es.ActionResult result;

            if (feature.feature_id > 0)
                result = await da.features.Update(feature);
            else
                result = await da.features.Insert(feature);

            if (result.Status != es.Status.Success)
            {
                modal.Show("Message", result.Msg);
                return;
            }

            NavigationManager.NavigateTo("feature/list");
            await JsService.Toast("toastsave", "Save Success");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    private async Task HandleDelete()
    {
        bool confirm = await modal.Show("Message", "Are you sure want to delete ?", "Yes", "No");
        if (!confirm)
            return;

        try
        {
            await da.features.Delete(FeatureId);

            NavigationManager.NavigateTo("feature/list");
        }
        catch (Exception ex)
        {
            modal.Show("Message", ex.Message);
        }
    }

    #endregion
}
